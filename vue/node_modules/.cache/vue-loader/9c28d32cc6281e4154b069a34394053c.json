{"remainingRequest":"D:\\phpStudy\\PHPTutorial\\WWW\\VueAdmin\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\phpStudy\\PHPTutorial\\WWW\\VueAdmin\\vue\\src\\views\\index\\Table.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\VueAdmin\\vue\\src\\views\\index\\Table.vue","mtime":1569057310161},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\VueAdmin\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\VueAdmin\\vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\VueAdmin\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\VueAdmin\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\VueAdmin\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {Console} from \"../../axios/api\";\nimport moment from \"moment\";\nconst columns = [{\n    title: 'ID',\n    dataIndex: 'log_id',\n    sorter: true,\n    width: '20%',\n    scopedSlots: { customRender: 'log_id' },\n}, {\n    title: '操作管理员',\n    dataIndex: 'username',\n    width: '20%',\n}, {\n    title: '操作时间',\n    dataIndex: 'create_time',\n    customRender: (text, record, index) => {\n        return moment(text * 1000).format('YYYY-MM-DD HH:mm:ss');\n    }\n}, {\n    title: 'IP',\n    dataIndex: 'ip',\n}, {\n    title: '操作描述',\n    dataIndex: 'log_note',\n}];\nconst describe = {\n    filterConfirm: '确定',\n    filterReset: '重置',\n    emptyText: '暂无数据'\n};\nexport default {\n    mounted() {\n        this.fetch();\n    },\n    data() {\n        return {\n            data: [],\n            pagination: {},\n            loading: false,\n            columns,\n            describe,\n            moment,\n        }\n    },\n    methods: {\n        handleTableChange (pagination, filters, sorter) {\n            const pager = { ...this.pagination };\n            pager.current = pagination.current;\n            this.pagination = pager;\n            this.fetch({\n                results: pagination.pageSize,\n                page: pagination.current,\n                sortField: sorter.field,\n                sortOrder: sorter.order,\n            });\n        },\n        fetch (params = {}) {\n            this.loading = true;\n            Console({\n                    results: params.results,\n                    page:params.page,\n                    sortField:params.sortField,\n                    sortOrder:params.sortOrder\n                }).then((data) => {\n                const pagination = { ...this.pagination };\n                // Read total count from server\n                // pagination.total = data.totalCount;\n                pagination.total = data.data.log_list.total;\n                this.loading = false;\n                this.data = data.data.log_list.data;\n                this.pagination = pagination;\n            });\n        }\n    },\n}\n",{"version":3,"sources":["Table.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Table.vue","sourceRoot":"src/views/index","sourcesContent":["<template>\r\n    <a-table\r\n            :columns=\"columns\"\r\n            :rowKey=\"record => record.log_id\"\r\n            :dataSource=\"data\"\r\n            :pagination=\"pagination\"\r\n            :loading=\"loading\"\r\n            :locale = \"describe\"\r\n            @change=\"handleTableChange\">\r\n        <template slot=\"name\" slot-scope=\"name\">\r\n            {{name.first}} {{name.last}}\r\n        </template>\r\n    </a-table>\r\n</template>\r\n<script>\r\n    import {Console} from \"../../axios/api\";\r\n    import moment from \"moment\";\r\n    const columns = [{\r\n        title: 'ID',\r\n        dataIndex: 'log_id',\r\n        sorter: true,\r\n        width: '20%',\r\n        scopedSlots: { customRender: 'log_id' },\r\n    }, {\r\n        title: '操作管理员',\r\n        dataIndex: 'username',\r\n        width: '20%',\r\n    }, {\r\n        title: '操作时间',\r\n        dataIndex: 'create_time',\r\n        customRender: (text, record, index) => {\r\n            return moment(text * 1000).format('YYYY-MM-DD HH:mm:ss');\r\n        }\r\n    }, {\r\n        title: 'IP',\r\n        dataIndex: 'ip',\r\n    }, {\r\n        title: '操作描述',\r\n        dataIndex: 'log_note',\r\n    }];\r\n    const describe = {\r\n        filterConfirm: '确定',\r\n        filterReset: '重置',\r\n        emptyText: '暂无数据'\r\n    };\r\n    export default {\r\n        mounted() {\r\n            this.fetch();\r\n        },\r\n        data() {\r\n            return {\r\n                data: [],\r\n                pagination: {},\r\n                loading: false,\r\n                columns,\r\n                describe,\r\n                moment,\r\n            }\r\n        },\r\n        methods: {\r\n            handleTableChange (pagination, filters, sorter) {\r\n                const pager = { ...this.pagination };\r\n                pager.current = pagination.current;\r\n                this.pagination = pager;\r\n                this.fetch({\r\n                    results: pagination.pageSize,\r\n                    page: pagination.current,\r\n                    sortField: sorter.field,\r\n                    sortOrder: sorter.order,\r\n                });\r\n            },\r\n            fetch (params = {}) {\r\n                this.loading = true;\r\n                Console({\r\n                        results: params.results,\r\n                        page:params.page,\r\n                        sortField:params.sortField,\r\n                        sortOrder:params.sortOrder\r\n                    }).then((data) => {\r\n                    const pagination = { ...this.pagination };\r\n                    // Read total count from server\r\n                    // pagination.total = data.totalCount;\r\n                    pagination.total = data.data.log_list.total;\r\n                    this.loading = false;\r\n                    this.data = data.data.log_list.data;\r\n                    this.pagination = pagination;\r\n                });\r\n            }\r\n        },\r\n    }\r\n</script>\r\n"]}]}